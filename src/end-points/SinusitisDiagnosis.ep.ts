import {NextFunction, Request, Response} from "express";
import * as DiagnosisDao from "../dao/SinusitisDiagnosis.dao";
import {DSinusitis} from "../models/Sinusitis.model";
import env from "../utils/validate-env";
import axios from 'axios';
import {AppLogger} from "../utils/logging";

const fs = require("fs");
const path = require("path");
const FormData = require("form-data");

export async function sinusitisDiagnosis(req: Request, res: Response, next: NextFunction) {

    const {patientId, additionalInfo} = req.body;
    const watersViewXrayImageFile = req.file;

    if (!patientId || !watersViewXrayImageFile) {
        return res.status(400).send({
            message: "Patient ID and Waters View Xray Image are required.",
        });
    }

    const data: Partial<DSinusitis> = {
        diagnosticianId: req.user?._id ?? "6748dfecb90a2d54067a224a", // TODO: for public
        patientId: patientId as string,
        additionalInformation: additionalInfo
    }

    try {
        const savedDiagnosis = await DiagnosisDao.createSinusitisDiagnosis(data, watersViewXrayImageFile);

        const updatedDiagnosis = await sinusitisIdentification(savedDiagnosis._id.toString(), watersViewXrayImageFile);

        res.sendSuccess(updatedDiagnosis, "Sinusitis diagnosis saved and updated with results!");
    } catch (error) {
        next(error);
    }

    // await DiagnosisDao.createSinusitisDiagnosis(data, watersViewXrayImageFile).then(async savedDiagnosis => {
    //     await sinusitisIdentification(savedDiagnosis._id.toString(), watersViewXrayImageFile).then(updatedDiagnosis => {
    //         res.sendSuccess(updatedDiagnosis, "Sinusitis diagnosis saved successfully!");
    //     });
    // }).catch(next);
}

export async function sinusitisIdentification(diagnosisId: string, watersViewXrayImageFile: Express.Multer.File) {
    try {
        const filePath = path.join(__dirname, "..", "uploads", watersViewXrayImageFile.filename);

        if (!fs.existsSync(filePath)) {
            throw new Error(`File not found at this path: ${filePath}`);
        }

        const formData = new FormData();
        formData.append("file", fs.createReadStream(filePath));

        const ep = `${env.FAST_SERVER_URL}/api/sinusitis/analyze`;
        const {data: dlModelResponse} = await axios.post(ep, formData, {
            headers: {
                ...formData.getHeaders(), // Include headers generated by form-data
            },
        });

        console.log("\n================== Fast API Response ==================");
        console.log(dlModelResponse);
        console.log("=========================================================\n");

        if (dlModelResponse.success && dlModelResponse.data) {
            AppLogger.info(`Fetched sinusitis identification results from DL model`);

            const diagnosisResults: Partial<DSinusitis> = {
                status: dlModelResponse.data.status, // diagnosed or failed
                diagnosisResult: {
                    isSinusitis: dlModelResponse.data.isSinusitis,
                    severity: dlModelResponse.data.severity,
                    suggestions: dlModelResponse.data.suggestions,
                    confidenceScore: dlModelResponse.data.confidenceScore,
                    prediction: dlModelResponse.data.prediction // "valid" | "invalid" | "N/A"
                }
            };

            return await DiagnosisDao.updateSinusitisDiagnosis(diagnosisId, diagnosisResults);
        } else {
            AppLogger.error(`Failed to retrieve diagnosis results from the DL model`);
            throw new Error("Failed to retrieve diagnosis results from the DL model.");
        }
    } catch (error) {
        console.log("\n============== sinusitis identification error ==============");
        console.log(error);
        console.log("==================================================================\n");
        throw error;
    }
}

export async function sinusitisDiagnosisAccept(req: Request, res: Response, next: NextFunction) {

    const {accept, diagnosisId} = req.body;

    if (accept === undefined || !diagnosisId) {
        return res.status(400).send({
            message: "Acceptance status and Diagnosis id required.",
        });
    }

    const data: Partial<DSinusitis> = {
        accepted: accept,
    }

    await DiagnosisDao.updateSinusitisDiagnosis(diagnosisId, data).then(async updatedDiagnosis => {
        res.sendSuccess(updatedDiagnosis, "Sinusitis diagnosis acceptance saved successfully!");
    }).catch(next);
}
