import {NextFunction, Request, Response} from "express";
import * as DiagnosisDao from "../dao/PharyngitisDiagnosis.dao";
import {DPharyngitis} from "../models/Pharyngitis.model";
import env from "../utils/validate-env";
import axios from 'axios';
import {AppLogger} from "../utils/logging";
import {IUser} from "../global";

const fs = require("fs");
const path = require("path");
const FormData = require("form-data");

export async function pharyngitisDiagnosis(req: Request, res: Response, next: NextFunction) {

    const {patientId, additionalInfo, isLearningPurpose} = req.body;
    const endoscopyImageFile = req.file;

    if (!patientId || !endoscopyImageFile) {
        return res.status(400).send({
            message: "Patient ID and endoscopy image are required.",
        });
    }

    const data: Partial<DPharyngitis> = {
        diagnosticianId: req.user?._id ?? "6748dfecb90a2d54067a224a", // TODO: for public
        patientId: patientId as string,
        additionalInformation: additionalInfo,
        isLearningPurpose: isLearningPurpose
    }

    try {
        const savedDiagnosis = await DiagnosisDao.createPharyngitisDiagnosis(data, endoscopyImageFile);

        const updatedDiagnosis = await pharyngitisIdentification(savedDiagnosis._id.toString(), endoscopyImageFile);

        res.sendSuccess(updatedDiagnosis, "Pharyngitis diagnosis saved and updated with results!");
    } catch (error) {
        next(error);
    }

    // await DiagnosisDao.createPharyngitisDiagnosis(data, endoscopyImageFile).then(async savedDiagnosis => {
    //     await pharyngitisIdentification(savedDiagnosis._id.toString(), endoscopyImageFile).then(updatedDiagnosis => {
    //         res.sendSuccess(updatedDiagnosis, "Pharyngitis diagnosis saved successfully!");
    //     });
    // }).catch(next);
}

export async function pharyngitisIdentification(diagnosisId: string, endoscopyImageFile: Express.Multer.File) {
    try {
        const filePath = path.join(__dirname, "..", "uploads", endoscopyImageFile.filename);

        if (!fs.existsSync(filePath)) {
            throw new Error(`File not found at this path: ${filePath}`);
        }

        const formData = new FormData();
        formData.append("file", fs.createReadStream(filePath));

        const ep = `${env.FAST_SERVER_URL}/api/pharyngitis/analyze`;
        const {data: dlModelResponse} = await axios.post(ep, formData, {
            headers: {
                ...formData.getHeaders(), // Include headers generated by form-data
            },
        });

        console.log("\n================== Fast API Response ==================");
        console.log(dlModelResponse);
        console.log("=========================================================\n");

        if (dlModelResponse.success && dlModelResponse.data) {
            AppLogger.info(`Fetched pharyngitis identification results from DL model`);

            const diagnosisResults: Partial<DPharyngitis> = {
                status: dlModelResponse.data.status, // diagnosed or failed
                diagnosisResult: {
                    isPharyngitis: dlModelResponse.data.isPharyngitis,
                    stage: dlModelResponse.data.stage,
                    suggestions: dlModelResponse.data.suggestions,
                    confidenceScore: dlModelResponse.data.confidenceScore,
                    prediction: dlModelResponse.data.prediction // "valid" | "invalid" | "N/A"
                }
            };

            return await DiagnosisDao.updatePharyngitisDiagnosis(diagnosisId, diagnosisResults);
        } else {
            AppLogger.error(`Failed to retrieve diagnosis results from the DL model`);
            throw new Error("Failed to retrieve diagnosis results from the DL model.");
        }
    } catch (error) {
        console.log("\n============== pharyngitis identification error ==============");
        console.log(error);
        console.log("==================================================================\n");
        throw error;
    }
}

export async function pharyngitisDiagnosisAccept(req: Request, res: Response, next: NextFunction) {

    const {accept, diagnosisId} = req.body;

    if (accept === undefined || !diagnosisId) {
        return res.status(400).send({
            message: "Acceptance status and Diagnosis id required.",
        });
    }

    const data: Partial<DPharyngitis> = {
        accepted: accept,
    }

    await DiagnosisDao.updatePharyngitisDiagnosis(diagnosisId, data).then(async updatedDiagnosis => {
        res.sendSuccess(updatedDiagnosis, "Pharyngitis diagnosis acceptance saved successfully!");
    }).catch(next);
}

export async function pharyngitisReports(req: Request, res: Response, next: NextFunction) {
    const ownUser = req.user as IUser;
    await DiagnosisDao.getPharyngitisReports(ownUser).then(async reportsData => {
        res.sendSuccess(reportsData, "Pharyngitis reports data fetched successfully!");
    }).catch(next);
}

export async function pharyngitis(req: Request, res: Response, next: NextFunction) {
    const ownUser = req.user as IUser;
    await DiagnosisDao.getPharyngitisData(ownUser).then(async data => {
        res.sendSuccess(data, "Pharyngitis list fetched successfully!");
    }).catch(next);
}


export async function pharyngitisImage(req: Request, res: Response, next: NextFunction) {
    const ownUser = req.user ? (req.user as IUser) : null;
    const uploadId = req.params._id;
    if (!uploadId) {
        return res.status(400).send({
            message: "Upload ID is required",
        });
    }
    await DiagnosisDao.getPharyngitisImage(ownUser, uploadId).then(async imagePath => {
        res.sendFile(imagePath!);
    }).catch(next);
}
